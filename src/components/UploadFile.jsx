// react imports
import React, { useState } from "react";
import { v4 as uuidv4 } from "uuid";
// material ui imports
import { Alert } from "@mui/material";
import Button from "@mui/material/Button";
import VideoLibraryIcon from "@mui/icons-material/VideoLibrary";
import LinearProgress from "@mui/material/LinearProgress";
// firebase imports
import { storage, db } from "../firebase";
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import {
  doc,
  serverTimestamp,
  updateDoc,
  addDoc,
  collection,
} from "firebase/firestore";

function UploadFile(props) {
  //States
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleChange = async (file) => {
    if (file === null) {
      setError("Please select a file first");
      setTimeout(() => {
        setError("");
      }, 3000);
      return;
    }
    // File size is > 100mb then error
    if (file.size / (1024 * 1024) > 100) {
      setError("File size is greater than 100 mb");
      setTimeout(() => {
        setError("");
      }, 3000);
      return;
    }

    setLoading(true);
    const uid = uuidv4(); // To generate the random id
    const storageRef = ref(storage, `/posts/${uid}/${file.name}`);
    const uploadTask = uploadBytesResumable(storageRef, file);
    uploadTask.on(
      "state_changed",
      (snapshot) => {
        const progress =
          (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
        console.log("Upload is " + progress + "% done");
      },
      (error) => {
        const errorMessage = error.toString();  // To convert the error message to string
        setError(errorMessage);
        setTimeout(() => {
          setError("");
        }, 3000);
        return;
      },
      async () => {
        try {
          // For storing the posts details into the fireDatabase.
          const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
          const userRef = collection(db, "posts");
          const dataRef = await addDoc(userRef, {
            likes: [],
            comments: [],
            pId: uid,  // Pid is post id which is generated by uuid.
            pUrl: downloadURL,
            uName: props.user && props.user.Fullname ? props.user.Fullname : "DefaultName",
            uProfile: props.user.profileImage,
            uId: props.user.userID,
            createdAt: serverTimestamp(),
          });

          const postID = dataRef.id  //Post id which is generated by the firebase.
          const userDocRef = doc(db, "users", props.user.userID);
          await updateDoc(userDocRef, {
            postID:
              props.user.postID === 0 ? [postID] : [...props.user.postID, postID],  // Set post id into the user details.
          });
          setLoading(false);
        } catch (error) {
          const errorMessage = error.toString();
          console.log(error);
          setError(errorMessage);
          setLoading(false);
        }
      }
    );
  };

  return (
    <>
      {error !== "" && typeof error === "string" ? (
        <Alert severity="error">{error}</Alert>
      ) : (
        <div>
          <input
            type="file"
            accept="video/*"
            id="upload-input"
            style={{ display: "none" }}
            onChange={(e) => handleChange(e.target.files[0])}
          />
          <label htmlFor="upload-input">
            <Button
              variant="outlined"
              disabled={loading}
              style={{ color: "red", border: "1px solid red" }}
              component="span"
            >
              <VideoLibraryIcon></VideoLibraryIcon> &nbsp; Upload Video
            </Button>
          </label>
          {loading && (
            <LinearProgress color="secondary" style={{ marginTop: "3%" }} />
          )}
        </div>
      )}
    </>
  );
}

export default UploadFile;
